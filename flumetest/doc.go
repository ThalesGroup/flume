// Package flumetest helps manage logs generated by the code under test.
// Logs generated outside the scope of a test (like by init() or test setup code)
// are discard, to avoid polluting go test's output stream.
// Logs generated during tests are buffered.  If the test succeeds, the logs
// are discarded. If the test failed, the accumulated logs are forward to t.Log().
//
//	func init() {
//	    // sets a typical flume config for tests, enabling all levels, and enabling development mode for
//	    // developer-friendly output encoding.
//	    // This also sets the log output to ioutil.Discard: this ensures
//	    // your go test output is not polluted with application logs generated by test initialization
//	    // or setup code.
//	    flumetest.SetDefaults()
//	}
//
//	func MyTest(t *testing.T) {
//	    // buffers application logs.  If test fails, accumulated logs are forwarded
//	    // to t.Log()
//	    defer flumetest.Start(t)()
//	    ...
//	}
//
// flumetest.SetDefaults() can be further configured with test flags and/or environment variables.
//
// To use your own log config string, set FLUME_TEST_CONFIG_STRING env var, or pass the -log-config
// argument in your test flags:
//
//	go test -log-config '{"encoder":"json"}'
//
// # Verbose Mode
//
// In verbose mode, application logs will be forwarded immediately to t.Log(), regardless of test outcome.
// Enable verbose mode by setting the FLUME_TEST_VERBOSE environment variable, or passing the -vv flag
// to go test:
//
//	go test -v -vv
package flumetest
