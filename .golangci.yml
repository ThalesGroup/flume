# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
#  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
#  deadline: 1m

  # exit code when at least one issue was found, default is 1
#  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
#  build-tags:
#    - mytag

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
#  skip-dirs:
#    - src/external_libs
#    - autogenerated_by_my_lib

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
#  skip-files:
#    - ".*\\.my\\.go$"
#    - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode:


# all available settings of specific linters
linters-settings:
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    rules:
      # Name of a rule.
      all:
        # List of file globs that will match this list of settings to compare against.
        # Default: $all
        files:
          - $all
        # List of allowed packages.
        # allow:
        #  - $gostd
        # Packages that are not allowed where the value is a suggestion.
        deny:
          - pkg: github.com/magiconair/properties/assert
            desc: Use testify/assert package instead
      main:
        files:
          - "!$test"
        deny:
          - pkg: github.com/davecgh/go-spew/spew
            desc: spew is usually only used in tests
          - pkg: github.com/stretchr/testify
            desc: testify is usually only used in tests
  gomodguard:
    blocked:
      modules:
        - gopkg.in/go-playground/assert.v1:
            recommendations:
              - github.com/stretchr/testify
            reason: "testify is the test assertion framework we use"
        - github.com/pborman/uuid:
            recommendations:
              - github.com/google/uuid
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
#    ignore-words:
#      - someword
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

linters:
  # to try out individual linters: golangci-lint run -E gocyclo,gosimple
  enable:
    - staticcheck
    - errcheck
    - gosimple
    - govet
    - ineffassign
##    - typecheck          # redundant?  compiler does this
    - unused
##    - bodyclose          # its all false positives with requester and sling, which both close the body already
    - depguard
##    - dogsled            # checks for too many blank identifiers.  don't care
    - dupl
    - errorlint
#    - exhaustive
#    - exhaustivestruct
##    - funlen              # checks function length.  don't care
#    - gci
##    - gochecknoglobals    # too common
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
##    - gocyclo             # checks cyclomatic complexity.  don't care
#    - godot
##    - godox               # checks for TODO comments.  not standardized
    - err113
##    - gofmt               # checks code is formatted, handled by make prep
#    - gofumpt
#    - goheader
##    - goimports           # checks import order.  We're not using goimports
    - revive
#    - gomnd
    - gomodguard
    - goprintffuncname
    - gosec
##    - lll                 # checks line length.  not enforced
##    - maligned            # optimizies struct field order, but structs are usually ordered for legibility
    - misspell
    - nakedret
    - nestif
#    - nlreturn             # don't really like how this looks in all cases.  wsl covers similar ground anyway.
    - noctx
    - nolintlint
#    - prealloc            # slice optimizations, but promotes too much premature optimization
    - rowserrcheck
    - stylecheck
#    - testpackage
    - tparallel
    - unconvert
##    - unparam            # too many false positives
##    - whitespace         # not enforced
  disable-all: true
#  presets:
#    - bugs
#    - unused
#  fast: false


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
  - Error return value of .(.*\.Write). is not checked
  # we use merry errors a lot, and err113 doesn't recognize it as a valid sentinel error
  - use wrapped static errors instead

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - scopelint
        - gochecknoinits
        - gochecknoglobals
        - wsl
        - goconst
    - path: cmd
      linters:
        # init() functions are pretty common in main packages
        - gochecknoinits
        - gochecknoglobals
    # exclude requiring comments on all exported stuff
    - linters:
        - revive
      text: "exported:"

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
#    - path: internal/hmac/
#      text: "weak cryptographic primitive"
#      linters:
#        - gosec

    # Exclude some staticcheck messages
#    - linters:
#        - staticcheck
#      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
#  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
#  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
#  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Show only new issues created after git revision `REV`
#  new-from-rev: REV

  # Show only new issues created in git patch with set file path.
#  new-from-patch: path/to/patch/file